
require 'mime/types/data'
require 'trenni'
require 'json'
require 'ostruct'

class TemplateState < Struct.new(:mime_types)
	NULL = 'NULL'
	
	def extensions_struct(extensions)
		if extensions
			'(const char*[]){' + (extensions.collect(&:inspect) + [0]).join(', ') + '}'
		else
			0
		end
	end
end

task :load_mime_types do
	mime_types_json_path = File.join(MIME::Types::Data::PATH, "mime-types.json")
	@mime_types = JSON::load(File.open mime_types_json_path)
end

task :generate_extensions_hashtable => :load_mime_types do
	all_extensions = {}
	
	@mime_types.each do |mime_type|
		if extensions = mime_type['extensions']
			extensions.each do |extension|
				all_extensions[extension] = mime_type['content-type']
			end
		end
	end
	
	template_path = File.expand_path("Extensions.trenni", __dir__)
	template = Trenni::Template.load_file(template_path)
	
	state = OpenStruct.new(extensions: all_extensions)
	result = template.to_string(state)
	
	File.write("Extensions.gperf", result)
end

task :generate_extensions => :generate_extensions_hashtable do
	sh 'gperf', '-CD', '-t', 'Extensions.gperf', '--output-file', 'Extensions.h'
end

task :generate_code do
	mime_types_json_path = File.join(MIME::Types::Data::PATH, "mime-types.json")
	mime_types = JSON::load(File.open mime_types_json_path)
	
	template_path = File.expand_path("MimeTypes.trenni", __dir__)
	template = Trenni::Template.load_file(template_path)
	
	template_state = TemplateState.new(mime_types)
	result = template.to_string(template_state)
	
	File.write("MimeTypes.c", result)
end

task :default => :generate_code