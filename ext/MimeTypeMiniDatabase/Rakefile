require 'mkmf'
require 'mime/types/data'
require 'erb'
require 'json'
require 'ostruct'

task :load_mime_types do
	mime_types_json_path = File.join(MIME::Types::Data::PATH, "mime-types.json")
	@mime_types = JSON::load(File.open mime_types_json_path)
end

class TemplateBinding < OpenStruct
	def get_binding
	 	binding
	end
end

task generate_extensions_hashtable: :load_mime_types do
	all_extensions = {}

	@mime_types.each do |mime_type|
		if extensions = mime_type['extensions']
			extensions.each do |extension|
				all_extensions[extension] = mime_type['content-type']
			end
		end
	end

	template_path = File.expand_path("Extensions.erb", __dir__)
	template = ERB.new(File.read(template_path))

	state = TemplateBinding.new(extensions: all_extensions)
	result = template.result(state.get_binding)

	File.write("Extensions.gperf", result)
end

task generate_extensions: :generate_extensions_hashtable do
	sh 'gperf', '-CD', '-t', 'Extensions.gperf', '--output-file', 'Extensions.h'
end

class TemplateState < TemplateBinding
	def extensions_struct(extensions)
		if extensions
			extensions.join(' ').inspect
		else
			0
		end
	end
end

task generate_mime_types_hashtable: :load_mime_types  do
	template_path = File.expand_path("MimeTypes.erb", __dir__)
	template = ERB.new(File.read(template_path))

	template_state = TemplateState.new(mime_types: @mime_types)
	result = template.result(template_state.get_binding)

	File.write("MimeTypes.gperf", result)
end

task generate_mime_types: :generate_mime_types_hashtable do
	sh 'gperf', '-C', '-t', 'MimeTypes.gperf', '--output-file', 'MimeTypes.h'
end

task compile: [:generate_extensions, :generate_mime_types] do
	extension_name = 'MimeTypesMiniDatabase'
	dir_config(extension_name)
	create_makefile(extension_name)
end

task default: :compile
